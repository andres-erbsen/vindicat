// vim: set ts=4 sw=4 :
option optimize_for = LITE_RUNTIME;

message DeviceInfo {
	repeated uint32 sig_algos = 1;
	repeated uint32 enc_algos = 2;
	repeated bytes sig_keys  = 3;
	repeated bytes enc_keys  = 4;
	optional int64 time = 5; // unix "epoch" format
  repeated string capabilities = 6;
}

message DeviceBusinesscard {
	required bytes device_info_msg = 1; // DeviceInfo
	repeated bytes sigs = 2;
}



message LinkInfo {
	enum Status { DEAD = 1; PUBLIC = 2;	}
	  required Status status = 1;
	required bytes left = 2;  // device identifier (hash prefix)
	required bytes right = 3; // ^
	optional int64 time = 4; // unix "epoch" format
}

message LinkPromise {
	repeated uint32 left_sig_algos = 1;
	repeated uint32 right_sig_algos = 2;
	required bytes link_info_msg = 3; // LinkInfo
	repeated bytes left_sigs = 4;
	repeated bytes right_sigs = 5;
}

message Subgraph { // set of nodes and edges...
	repeated DeviceBusinesscard devices = 1;
	repeated LinkPromise links = 2;
}



message RoutingRequest { // follows static headers
	required uint32 enc_algo = 1;
	optional bytes sender_pubkey = 2;
	required bytes details = 3; // Encrypted Hop
}

message Hop {
	enum Type { UP = 1; SIMPLE = 2; }
	  required Type type = 1;
	optional bytes next = 2; // next device's identifier
	optional uint32 enc_algo = 3; // RoutingRequest.1 for next packet
	optional bytes sender_pubkey = 4; // RoutingRequest.2 for next packet
	optional bytes details = 5; // RoutingRequest.3 for next packet
	enum NonceAlgo { XTEA32 = 2; }
	  optional NonceAlgo nonce_algo = 6;
}


message ConnectionAccept {
	enum Auth { AUTHENC_BCARD = 1; }
	optional bytes sender_pubkey = 1;
	required Auth auth = 2;
	required bytes cookie = 3;
}
